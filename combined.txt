
Filename: app.js

const express = require('express');
const bodyParser = require('body-parser');
const fal = require('@fal-ai/serverless-client');
const multer = require('multer');
const path = require('path');
const fs = require('fs').promises;
const axios = require('axios');
const sharp = require('sharp');
require('dotenv').config();

const app = express();
const port = process.env.PORT || 3000;

fal.config({
    credentials: process.env.FAL_KEY
});

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

const upload = multer({ dest: 'uploads/' });

app.use(express.static(__dirname));

const savedImagesDir = path.join(__dirname, 'saved_images');
fs.mkdir(savedImagesDir, { recursive: true }).catch(console.error);

const modelMap = {
    'flux-pro': 'fal-ai/flux-pro',
    'text-to-image': 'fal-ai/flux/dev',
    'image-to-image': 'fal-ai/flux/dev/image-to-image',
    'text-to-image-schnell': 'fal-ai/flux/schnell',
    'sdxl': 'fal-ai/lora'
};

app.post('/generate', async (req, res) => {
    try {
        const { model, input } = req.body;
        console.log('Received generate request:', { model, input, seed: input.seed });

        const falModel = modelMap[model];
        if (!falModel) {
            throw new Error(`Invalid model: ${model}`);
        }

        const adjustedInput = adjustInputForModel(model, input);

        const result = await fal.subscribe(falModel, {
            input: adjustedInput,
            logs: true,
            onQueueUpdate: (update) => {
                if (update.status === "IN_PROGRESS") {
                    update.logs.map((log) => log.message).forEach(console.log);
                }
            }
        });

        console.log('Generation result:', result);

        const savedImages = await saveImages(
            result.images, 
            input.prompt, 
            adjustedInput.guidance_scale, 
            adjustedInput.num_inference_steps
        );

        res.json({
            images: savedImages,
            seed: result.seed
        });
    } catch (error) {
        console.error('Error in /generate:', error);
        res.status(500).json({ error: error.message });
    }
});

function adjustInputForModel(model, input) {
    const adjustedInput = { ...input };

    if (input.image_size) {
        adjustedInput.image_size = input.image_size.replace('x', '_');
    }

    adjustedInput.num_inference_steps = adjustedInput.num_inference_steps || 35;
    adjustedInput.guidance_scale = adjustedInput.guidance_scale || 2;
    adjustedInput.num_images = adjustedInput.num_images || 1;

    if (!adjustedInput.seed) {
        adjustedInput.seed = Math.floor(Math.random() * 1000000000);
    }

    switch (model) {
        case 'flux-pro':
            adjustedInput.safety_tolerance = "6";
            break;
        case 'text-to-image':
            adjustedInput.enable_safety_checker = false;
            break;
        case 'image-to-image':
            adjustedInput.enable_safety_checker = false;
            adjustedInput.strength = adjustedInput.strength || 0.95;
            break;
        case 'text-to-image-schnell':
            adjustedInput.enable_safety_checker = false;
            adjustedInput.num_inference_steps = Math.min(adjustedInput.num_inference_steps || 12, 12);
            delete adjustedInput.guidance_scale;
            break;
        case 'sdxl':
            adjustedInput.model_name = "stabilityai/stable-diffusion-xl-base-1.0";
            break;
    }

    return adjustedInput;
}

async function saveImages(images, prompt, guidanceScale, inferenceSteps) {
    const savedImages = [];
    for (let i = 0; i < images.length; i++) {
        const image = images[i];
        const truncatedPrompt = prompt.replace(/[^a-z0-9]/gi, '').toLowerCase().slice(0, 20);
        const fileName = `${truncatedPrompt}_g${guidanceScale}_s${inferenceSteps}_${i + 1}.png`;
        const filePath = path.join(savedImagesDir, fileName);
        
        const response = await axios.get(image.url, { responseType: 'arraybuffer' });
        
        await sharp(response.data)
            .png()
            .toFile(filePath);
        
        savedImages.push({
            url: `/saved_images/${fileName}`,
            content_type: 'image/png',
            guidanceScale: guidanceScale,
            inferenceSteps: inferenceSteps
        });
    }
    return savedImages;
}

app.post('/upload', upload.single('file'), async (req, res) => {
    try {
        const file = req.file;
        const fileUrl = `http://localhost:${port}/uploads/${file.filename}`;
        res.json({ fileUrl });
    } catch (error) {
        console.error('Error in /upload:', error);
        res.status(500).json({ error: error.message });
    }
});

app.get('/previous-images', async (req, res) => {
    try {
        const files = await fs.readdir(savedImagesDir);
        const images = files.map(file => ({
            url: `/saved_images/${file}`
        }));
        res.json(images);
    } catch (error) {
        console.error('Error fetching previous images:', error);
        res.status(500).json({ error: error.message });
    }
});

app.use('/uploads', express.static(path.join(__dirname, 'uploads')));
app.use('/saved_images', express.static(savedImagesDir));

app.listen(port, () => {
    console.log(`Server is running on http://localhost:${port}`);
});



Filename: client.js

document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('generatorForm');
    const result = document.getElementById('result');
    const spinner = document.getElementById('spinner');
    const log = document.getElementById('log');
    const notificationArea = document.getElementById('notificationArea');
    const modelSelect = document.getElementById('model');
    const imageUploadDiv = document.getElementById('imageUploadDiv');
    const imageUpload = document.getElementById('imageUpload');
    const stepsInput = document.getElementById('steps');
    const stepsValue = document.getElementById('stepsValue');
    const guidanceInput = document.getElementById('guidance');
    const guidanceValue = document.getElementById('guidanceValue');
    const resetDefaultsButton = document.getElementById('resetDefaults');

    modelSelect.addEventListener('change', () => {
        imageUploadDiv.style.display = modelSelect.value === 'image-to-image' ? 'block' : 'none';
    });

    stepsInput.addEventListener('input', () => {
        stepsValue.textContent = stepsInput.value;
    });

    guidanceInput.addEventListener('input', () => {
        guidanceValue.textContent = guidanceInput.value;
    });

    resetDefaultsButton.addEventListener('click', () => {
        stepsInput.value = 35;
        stepsValue.textContent = '35';
        guidanceInput.value = 18;
        guidanceValue.textContent = '18';
        document.getElementById('seed').value = '';
    });

    form.addEventListener('submit', async (e) => {
        e.preventDefault();
        await generateImage();
    });

    async function generateImage() {
        spinner.style.display = 'block';
        log.innerHTML = '';
        notificationArea.innerHTML = 'Generating image...';
        notificationArea.style.display = 'block';
        result.innerHTML = ''; // Clear previous results

        const formData = new FormData(form);
        const model = formData.get('model');
        const randomSuffix = Math.floor(Math.random() * 1000000);
        const input = {
            prompt: `${formData.get('prompt')} (random:${randomSuffix})`,
            image_size: formData.get('imageSize'),
            num_inference_steps: parseInt(formData.get('steps')) || 35,
            guidance_scale: parseFloat(formData.get('guidance')) || 18,
            num_images: parseInt(formData.get('numImages')) || 1,
            seed: formData.get('seed') ? parseInt(formData.get('seed')) : undefined,
            enable_safety_checker: false
        };

        if (model === 'text-to-image-schnell') {
            input.num_inference_steps = Math.min(input.num_inference_steps, 12);
            delete input.guidance_scale;
        }

        if (model === 'image-to-image') {
            if (imageUpload.files.length) {
                const file = imageUpload.files[0];
                input.image_url = await uploadImage(file);
            } else {
                log.innerHTML = 'Please upload an image for Image to Image model.';
                spinner.style.display = 'none';
                notificationArea.style.display = 'none';
                return;
            }
        }
        await sendGenerateRequest(model, input);
        await fetchAndDisplayPreviousImages();
    }

    async function uploadImage(file) {
        const formData = new FormData();
        formData.append('file', file);

        try {
            const response = await fetch('/upload', {
                method: 'POST',
                body: formData
            });

            if (!response.ok) {
                throw new Error('Image upload failed');
            }

            const data = await response.json();
            return data.fileUrl;
        } catch (error) {
            console.error('Error uploading image:', error);
            throw error;
        }
    }

    async function sendGenerateRequest(model, input) {
        try {
            const response = await fetch('/generate', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ model, input }),
            });

            if (!response.ok) {
                throw new Error('Image generation failed');
            }

            const data = await response.json();
            displayImages(data.images);
            log.innerHTML = `Seed: ${data.seed}`;
        } catch (error) {
            console.error('Error:', error);
            log.innerHTML = `Error: ${error.message}`;
        } finally {
            spinner.style.display = 'none';
            notificationArea.style.display = 'none';
        }
    }

    function displayImages(images) {
        images.forEach(image => {
            const img = document.createElement('img');
            img.src = image.url;
            img.alt = 'Generated Image';
            result.appendChild(img);
        });
    }
});

async function fetchAndDisplayPreviousImages() {
    try {
        const response = await fetch('/previous-images');
        const images = await response.json();
        const previousImagesDiv = document.getElementById('previousImages');
        previousImagesDiv.innerHTML = ''; // Clear existing images
        images.forEach(image => {
            const imgElement = document.createElement('img');
            imgElement.src = image.url;
            imgElement.alt = 'Generated Image';
            previousImagesDiv.appendChild(imgElement);
        });
    } catch (error) {
        console.error('Error fetching previous images:', error);
    }
}


Filename: index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Image Generator</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            background-color: #f4f4f4;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background-color: #fff;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            display: flex;
            flex-wrap: wrap;
        }
        h1 {
            width: 100%;
            text-align: center;
            color: #333;
        }
        .form-section {
            flex: 1;
            min-width: 300px;
            padding-right: 20px;
        }
        .result-section {
            flex: 2;
            min-width: 300px;
        }
        label {
            display: block;
            margin-bottom: 5px;
        }
        input[type="text"], select, input[type="number"] {
            width: 100%;
            padding: 8px;
            margin-bottom: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        input[type="submit"] {
            background-color: #4CAF50;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        input[type="submit"]:hover {
            background-color: #45a049;
        }
        .image-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        .image-container {
            text-align: center;
        }
        .image-container img {
            max-width: 100%;
            height: auto;
        }
        .spinner {
            display: none;
            text-align: center;
            margin-top: 20px;
        }
        .advanced-options {
            margin-top: 10px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        .advanced-options summary {
            cursor: pointer;
        }
        #notificationArea {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            background-color: #f0f0f0;
            padding: 10px;
            text-align: center;
            display: none;
            z-index: 1000;
        }
        @media (max-width: 768px) {
            .container {
                flex-direction: column;
            }
            .form-section, .result-section {
                width: 100%;
                padding-right: 0;
            }
        }
        .previous-images-section {
            margin-top: 30px;
            padding: 20px;
            background-color: #f9f9f9;
            border-radius: 5px;
        }
        .previous-images-section h2 {
            margin-bottom: 15px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>AI Image Generator</h1>

        <div class="form-section">
            <form id="generatorForm">
                <div>
                    <label for="model">Model:</label>
                    <select id="model" name="model">
                        <option value="text-to-image">Text to Image [dev] FLUX.1</option>
                        <option value="flux-pro">[pro] FLUX.1</option>
                        <option value="image-to-image">Image to Image [dev]</option>
                        <option value="text-to-image-schnell">Text to Image [schnell]</option>
                        <option value="sdxl">SDXL</option>
                    </select>
                </div>

                <div>
                    <label for="prompt">Prompt:</label>
                    <input type="text" id="prompt" name="prompt" required>
                </div>

                <div id="imageUploadDiv" style="display: none;">
                    <label for="imageUpload">Image Upload (for Image to Image):</label>
                    <input type="file" id="imageUpload" name="imageUpload">
                </div>

                <div>
                    <label for="imageSize">Image Size:</label>
                    <select id="imageSize" name="imageSize">
                        <option value="portrait_4_3">Portrait 4:3 - 768x1024</option>
                        <option value="square_hd">Square HD - 1024x1024</option>
                        <option value="square">Square - 512x512</option>
                        <option value="landscape_4_3">Landscape 4:3 - 1024x768</option>
                        <option value="portrait_16_9">Portrait 16:9 - 576x1024</option>
                        <option value="landscape_16_9">Landscape 16:9 - 1024x576</option>
                    </select>
                </div>

                <div>
                    <label for="steps">Num Inference Steps: <span id="stepsValue">35</span></label>
                    <input type="range" id="steps" name="steps" min="1" max="50" value="35">
                </div>

                <div>
                    <label for="guidance">Guidance Scale: <span id="guidanceValue">18</span></label>
                    <input type="range" id="guidance" name="guidance" min="1" max="20" value="18" step="0.1">
                </div>

                <div>
                    <label for="numImages">Number of Images:</label>
                    <input type="number" id="numImages" name="numImages" min="1" max="4" value="1">
                </div>

                <details class="advanced-options">
                    <summary>Advanced Options</summary>
                    <div>
                        <label for="seed">Seed (optional):</label>
                        <input type="text" id="seed" name="seed">
                    </div>
                    <button type="button" id="resetDefaults">Reset to Defaults</button>
                </details>

                <input type="submit" id="generateButton" value="Generate Image">
            </form>
        </div>

        <div class="result-section">
            <div id="result" class="image-grid"></div>
            <div id="spinner" class="spinner">Loading...</div>
            <div id="log"></div>
        </div>
    </div>

    <div class="previous-images-section">
        <h2>Previously Generated Images</h2>
        <div id="previousImages" class="image-grid"></div>
    </div>

    <div id="notificationArea"></div>

    <script src="client.js"></script>
    <script>
        // Fetch and display previously generated images on page load
        async function fetchAndDisplayPreviousImages() {
            try {
                const response = await fetch('/previous-images');
                const images = await response.json();
                const previousImagesDiv = document.getElementById('previousImages');
                previousImagesDiv.innerHTML = ''; // Clear existing images
                images.forEach(image => {
                    const imgElement = document.createElement('img');
                    imgElement.src = image.url;
                    imgElement.alt = 'Generated Image';
                    previousImagesDiv.appendChild(imgElement);
                });
            } catch (error) {
                console.error('Error fetching previous images:', error);
            }
        }

        document.addEventListener('DOMContentLoaded', fetchAndDisplayPreviousImages);

        // Add event listener to refresh previous images after new image generation
        document.getElementById('generatorForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            await generateImage();
            fetchAndDisplayPreviousImages();
        });
    </script>
</body>
</html>

